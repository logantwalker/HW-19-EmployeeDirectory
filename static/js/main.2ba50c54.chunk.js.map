{"version":3,"sources":["components/Employees/Employee/Employee.js","components/Employees/Employees.js","components/directoryWindow/directoryWindow.js","App.js","serviceWorker.js","index.js"],"names":["employee","props","name","email","phone","start","employees","map","i","Employee","key","id","startDate","directoryWindow","className","centered","hoverable","data-field","flat","node","waves","onClick","clicked","Employees","App","originalList","birtdDate","useState","sortByName","shouldSort","direction","stateObj","setState","unsortedOriginal","sortByHandler","sortedArray","sort","a","b","textA","toUpperCase","textB","alignLinks","brand","href","menuIcon","options","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","placeholder","onChange","event","console","log","target","value","filteredList","filter","toLowerCase","includes","employeeFilterHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ba50c54.chunk.js","sourcesContent":["import React from 'react';\nimport 'materialize-css';\n\nconst employee = (props) => {\n    return (\n        <tr>\n            <td>\n                {props.name}\n            </td>\n            <td>\n                {props.email}\n            </td>\n            <td>\n                {props.phone}\n            </td>\n            <td>\n                {props.start}\n            </td>\n\n        </tr>\n    )\n}\n\nexport default employee;","import React from 'react';\nimport Employee from './Employee/Employee';\n\nconst employees = (props) =>{\n    return(\n        props.employees.map((employee, i) => {\n            return (\n              <Employee\n                key={employee.id}\n                name={employee.name}\n                email={employee.email}\n                phone={employee.phone}\n                start={employee.startDate} />\n            )\n          })\n    );\n}\n\nexport default employees;","import React from 'react';\nimport Employees from '../Employees/Employees';\nimport './directoryWindow.css';\nimport 'materialize-css';\nimport { Button, Table } from 'react-materialize';\n\nconst directoryWindow = (props) => {\n\n    return (\n        <div className='directWin container'>\n            <Table centered={true} hoverable={true} >\n                <thead>\n                    <tr>\n                        <th data-field=\"name\">\n                            <Button flat node=\"button\" waves='light' onClick={props.clicked()}>\n                                Name\n                            </Button>\n                        </th>\n                        <th data-field=\"email\">\n                            <Button flat node=\"button\" waves='light'>\n                                Email\n                            </Button>\n                        </th>\n                        <th data-field=\"phone\">\n                            <Button flat node=\"button\" waves='light'>\n                                Phone\n                            </Button>\n                        </th>\n                        <th data-field=\"start\">\n                            <Button flat node=\"button\" waves='light'>\n                                Start Date\n                            </Button>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <Employees\n                        employees={props.employees}\n                    />\n                </tbody>\n            </Table>\n\n        </div>\n    );\n}\n\nexport default directoryWindow;","import React, { useState } from 'react';\nimport DirectoryWindow from './components/directoryWindow/directoryWindow';\nimport './App.css';\nimport 'materialize-css';\nimport { Navbar, Icon, TextInput } from 'react-materialize';\n\n\nfunction App() {\n  const originalList = [\n    {\n      id: 0,\n      name: 'Logan Walker',\n      phone: 4788675309,\n      email: 'placeholder@email.com',\n      startDate: '05/20/2019',\n      birtdDate: '11/27/1995'\n    },\n    {\n      id: 1,\n      name: 'Alice Lew',\n      phone: 4704445555,\n      email: 'alice@email.com',\n      startDate: '10/22/2019',\n      birtdDate: '02/27/1997'\n    },\n    {\n      id: 2,\n      name: 'Kyle Olson',\n      phone: 1234567890,\n      email: 'kyleOlson@email.com',\n      startDate: '02/05/2020',\n      birtdDate: '05/15/1996'\n    },\n    {\n      id: 3,\n      name: 'Jose Morgan',\n      phone: 9876543210,\n      email: 'jose@email.com',\n      startDate: '12/01/2019',\n      birtdDate: '11/06/1993'\n    },\n    {\n      id: 4,\n      name: 'Pranav Dorbala',\n      phone: 5673854623,\n      email: 'pranav@email.com',\n      startDate: '11/17/2019',\n      birtdDate: '04/18/1996'\n    },\n    {\n      id: 5,\n      name: 'Random Person',\n      phone: 5673854623,\n      email: 'random@email.com',\n      startDate: '11/17/2019',\n      birtdDate: '04/18/1996'\n    },\n    {\n      id: 6,\n      name: 'John Doe',\n      phone: 5673854623,\n      email: 'john@email.com',\n      startDate: '11/17/2019',\n      birtdDate: '04/18/1996'\n    },\n    {\n      id: 7,\n      name: 'Jane Smith',\n      phone: 1111111111,\n      email: 'jane@email.com',\n      startDate: '11/17/2019',\n      birtdDate: '04/18/1996'\n    }\n  ];\n  \n  const [stateObj, setState] = useState({\n    employees: originalList,\n    sortByName: {\n      shouldSort: false,\n      direction: true\n    }\n  });\n  let unsortedOriginal=originalList;\n  const sortByHandler = () =>{\n    if(stateObj.sortByName.shouldSort === false){\n      let unsortedArray = stateObj.employees;\n      let sortedArray = unsortedArray.sort((a,b)=>{\n        var textA = a.name.toUpperCase();\n        var textB = b.name.toUpperCase();\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n      })\n      setState({\n        employees: sortedArray,\n        sortByName:{\n          shouldSort:true,\n          direction:true\n        }\n      })\n    }\n    else if(stateObj.sortByName.shouldSort && stateObj.sortByName.direction){\n      let unsortedArray = stateObj.employees;\n      let sortedArray = unsortedArray.sort((a,b)=>{\n        var textA = a.name.toUpperCase();\n        var textB = b.name.toUpperCase();\n        return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n      })\n      setState({\n        employees: sortedArray,\n        sortByName:{\n          shouldSort:true,\n          direction:false\n        }\n      })\n    }\n    else if(stateObj.sortByName.shouldSort && !stateObj.sortByName.direction){\n      setState({\n        employees: unsortedOriginal,\n        sortByName: {\n          shouldSort:false,\n          direction:true\n        }\n      })\n    }\n  }\n\n  const employeeFilterHandler = (event) => {\n    console.log('changed')\n    if (event.target.value) {\n      let filteredList = originalList.filter(employee => employee.name.toLowerCase().includes(event.target.value.toLowerCase()));\n      setState({\n        employees:filteredList,\n        sortByName: stateObj.sortByName\n      })\n    }\n    else{\n      setState({\n        employees: originalList,\n        sortByName: stateObj.sortByName\n      })\n    }\n  }\n\n  return (\n    <div>\n      <Navbar\n        className='blue darken-4'\n        alignLinks=\"right\"\n        brand={<a className=\"brand-logo\" href=\"!#\">Employee Directory</a>}\n        id=\"\"\n        menuIcon={<Icon>menu</Icon>}\n        options={{\n          draggable: true,\n          edge: 'left',\n          inDuration: 250,\n          onCloseEnd: null,\n          onCloseStart: null,\n          onOpenEnd: null,\n          onOpenStart: null,\n          outDuration: 200,\n          preventScrolling: true\n        }}>\n      </Navbar>\n\n      <div className='container'>\n        <TextInput className='searchBar' id=\"TextInput-4\" placeholder='Filter By Name' onChange={(event) => employeeFilterHandler(event)} />\n      </div>\n\n      <DirectoryWindow\n        employees={stateObj.employees}\n        clicked={()=> sortByHandler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}